@startuml

class Iterator{
-Project project
-Task task
-List<task> taskList
-List<Project> projectList
-Project root

+Iterator(Task node)
+Iterator(Project node)
+void root()
+void dfs(Project projectForSearch)
+void next()
+Boolean hasNext()
}


abstract class Node{
#String name
-Time startTime
-Time endTime
-Date startDate
-Date endDate
-Double workingTime
+createIterator
#Project father
#float calculateTotalTime()

}

class Observable{
-List<Observer> observers
+void addObserver(Observer observer)
+void deleteObserver (Observer observer)
+void notifyObservers()
}

interface Observer{
+void update()
}

class Project{
-double totalTime
-int numChildsTask
-int numChildsProject
-List<Task> childsTask
-List<Project> childsProject

+Task getChildTaskByName(String name)
+Project getChildProjectByName(String nombre)
+float calculateTotalTime()
+void createNewTask(String name,Observable reloj)
+void createNewSubProject(String name)
+void deleteTask(Node node)
+void deleteProyecto(Project proyecto)
+void displayProject()
+Project getInstance()
}
class SingletonClock{
-Timer clock
-SingletonClock instance
+void startTimer()
}
class Task{
-double totalTime
-int ticks
-boolean active
-boolean done
-LocalDateTime startDate
-List<TimeInterval> timeIntervals
-boolean started

+void setDone()
+float calculateTotalTime()
+void start(SingletonClock clock)
+void stop(SingletonClock clock)
+void changename(String newname)
+void update()
+void displayTask()
}
class TimeInterval{
-LocalDateTime startTime
-LocalDateTime endTime
+TimeInterval(SingletonClock clock)
+void endInterval(SingletonClock clock)
}

Project  "0..*"--|> "0..*"Node
Task "0..*"---|> "1" Node
Task ..|> Observer
Node --> Project
Node --> "0..*"Task
Client "1"--o "0..*"Project
SingletonClock "1" --|> "1"Observable
TimeInterval "0..*" <-- Task
Observable --> "0..*"Observer
SingletonClock --* SingletonClock
Iterator --> "0..*" Project
Iterator --> "0..*" Task

@enduml